---
import type { IProject } from "src/models/project";
import { cn } from "src/utils/class-name";
import GithubLineIcon from "../icons/GithubLineIcon.astro";
import RedirectLineIcon from "../icons/RedirectLineIcon.astro";
import stringPreprocessor from "../../../utils/string-preprocessor";
import InteractiveImage from "../InteractiveImage.astro";
import imageReader from "../../../utils/image-reader";

interface Props {
  data: IProject;
  inverted: boolean;
}

const {
  data: { title, date, description, techStack, imageUrl, githubUrl, projectUrl, isLive, isCollaborative },
  inverted,
} = Astro.props;

const processeedDescription = stringPreprocessor(description);

---

<section
  class={cn(
    inverted ? "flex-row max-lg:flex-col" : "flex-row-reverse max-lg:flex-col",
    "flex w-full max-lg:gap-6 gap-16 p-12 max-lg:p-2 hover:bg-primary hover:bg-opacity-50 duration-200 rounded-2xl cursor-pointer",
  )}>
  <div class="flex w-[45%] max-lg:w-full flex-col gap-2">
    <div class="w-full">
      {
        imageUrl.length > 0 && (
          <InteractiveImage
            class="w-full cursor-pointer rounded-xl object-cover transition-transform hover:scale-[102%]"
            width={550}
            height={850}
            rawSrc={imageUrl[0]!}
            src={imageReader(imageUrl[0]!)!}
            alt="Temporary Image"
          />
        )
      }
    </div>
    {
      imageUrl.length > 1 && (
        <div class={cn("flex w-full gap-4 max-lg:gap-2", imageUrl.length > 3 ? "justify-between" : "justify-start")}>
          {imageUrl.slice(1).map(async (url) => {
            return (
              <InteractiveImage
                class="w-[31%] cursor-pointer rounded-lg object-cover transition-transform hover:scale-[102%]"
                width={550}
                height={850}
                rawSrc={url}
                src={imageReader(url)!}
                alt="Temporary Image"
              />
            );
          })}
        </div>
      )
    }
  </div>
  <div class="flex w-[55%] max-lg:w-full flex-col items-start justify-center">
    {
      isLive && (
        <div class="relative flex items-center">
          <span class="absolute -left-0.5 inline-flex h-4 w-4 animate-ping rounded-full bg-red-500 opacity-75" />
          <span class="relative inline-flex h-3 w-3 rounded-full bg-red-500" />
          <p class="ps-3 text-base max-lg:text-sm text-white">LIVE</p>
        </div>
      )
    }
    <h4 class="flex items-center gap-2 max-lg:gap-1 max-lg:text-lg text-3xl font-semibold text-white">
      <span class="pe-4">{title}</span>
      {
        githubUrl?.map((url) => {
          return (
            <a
              target="_blank"
              href={url}
              class="cursor-pointer w-8 max-lg:w-6 max-lg:min-w-6 stroke-white transition-colors hover:stroke-primary">
              <GithubLineIcon />
            </a>
          );
        })
      }
      {
        isLive && (
          <a
            target="_blank"
            href={projectUrl}
            class="cursor-pointer w-8 max-lg:w-6 max-lg:min-w-6 stroke-white transition-colors hover:stroke-primary">
            <RedirectLineIcon />
          </a>
        )
      }
    </h4>
    <p class="text-gray-500 max-lg:text-sm pb-4">{date} - {isCollaborative ? "Collaborative" : "Personal"}</p>
    <Fragment
      class="py-4 text-base max-lg:text-xs text-white"
      set:html={processeedDescription}
    />
    <div class="flex flex-wrap max-lg:gap-2 gap-4 pt-4">
      {
        techStack.map((tech) => {
          return (
            <span class="flex items-center justify-center text-nowrap rounded-full text-center bg-[#00ADB4] bg-opacity-20 max-lg:px-2 px-4 py-0.5 font-roboto-mono text-primary text-sm max-lg:text-xs transition-transform hover:scale-110">
              {tech}
            </span>
          );
        })
      }
    </div>
  </div>
</section>
